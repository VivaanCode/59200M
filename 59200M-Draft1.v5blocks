{"mode":"Blocks","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"U`9aA+=)r+L1tzA.)-qi\">myVariable</variable><variable id=\"mCR=??6l%bV4ZZ0^pb(0\">intakeDirection</variable></variables><block type=\"v5_events_when_driver\" id=\"=]!9_}!0`F=Ek.M4}fGb\" x=\"390\" y=\"90\"><next><block type=\"v5_variables_set_variable\" id=\"uqlNAtMCgXFa;F`RjAI5\"><field name=\"VARIABLE\" id=\"mCR=??6l%bV4ZZ0^pb(0\">intakeDirection</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"D:`oDKp3j$s;wmyhV.bg\"><field name=\"NUM\">0</field></shadow></value></block></next></block><block type=\"v5_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"110\"><next><block type=\"v5_variables_set_variable\" id=\"9eJ#HDXX,gpl:ktg{/#+\"><field name=\"VARIABLE\" id=\"mCR=??6l%bV4ZZ0^pb(0\">intakeDirection</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"vl3p!fY^r`-_Q.GOG1v!\"><field name=\"NUM\">0</field></shadow></value></block></next></block><block type=\"v5_events_when_controller_button\" id=\"+BHU[N+XqF8$!Z6DE:m0\" x=\"70\" y=\"310\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonL1</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"v5_control_if_then_else\" id=\"605(#`S%v3tEZ6~O:sbL\"><value name=\"CONDITION\"><block type=\"v5_operator_equal_to\" id=\"hw.kVoSn|k`RiK%9jy;w\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"%7`0Z_~%j#wGcls8KY]$\"><field name=\"NUM\">0</field></shadow><block type=\"v5_variables_variable\" id=\"VQJnxweW{n=!j$,r~tFq\"><field name=\"VARIABLE\" id=\"mCR=??6l%bV4ZZ0^pb(0\">intakeDirection</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"B6ArEO`tL}uZ*./kgBIK\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_stop_motor\" id=\"kHZ;[8IqMCa{yAy,Ta._\"><field name=\"MOTOR\">Intake</field><next><block type=\"v5_variables_set_variable\" id=\"t7Kz5H1r_v4[76]A[i*V\"><field name=\"VARIABLE\" id=\"mCR=??6l%bV4ZZ0^pb(0\">intakeDirection</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"p~zb$j9bhD8n1v4Hv0t.\"><field name=\"NUM\">0</field></shadow></value></block></next></block></statement><statement name=\"SUBSTACK2\"><block type=\"v5_motion_spin\" id=\"dw(!ywQ$m6qSzzoV7dc}\"><field name=\"MOTOR\">Intake</field><field name=\"DIRECTION\">fwd</field><next><block type=\"v5_variables_set_variable\" id=\"nEKmVeRXOo,=Y;U,==k4\"><field name=\"VARIABLE\" id=\"mCR=??6l%bV4ZZ0^pb(0\">intakeDirection</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"37B]Ljmr`ywW~5tHVL?U\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement></block></next></block><block type=\"v5_events_when_controller_button\" id=\"juEMv$CxF{KJ5*F6|c5g\" x=\"510\" y=\"310\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonL1</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"v5_control_if_then_else\" id=\"3f~ReZRBPjkBqa7)PH^y\"><value name=\"CONDITION\"><block type=\"v5_operator_equal_to\" id=\"3G/WgANwf?gS]|sfHWqw\"><value name=\"OPERAND1\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"v5_variables_variable\" id=\"*x!56gHkzlwi|HHN!DT/\"><field name=\"VARIABLE\" id=\"mCR=??6l%bV4ZZ0^pb(0\">intakeDirection</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"d@`]D;kw8cLh+jbh2JII\"><field name=\"NUM\">-1</field></shadow></value></block></value><statement name=\"SUBSTACK\"><block type=\"v5_motion_stop_motor\" id=\"}$ausf{P*s4.N]R`(;s3\"><field name=\"MOTOR\">Intake</field><next><block type=\"v5_variables_set_variable\" id=\"potVUy!j%dGwzqOw/}5m\"><field name=\"VARIABLE\" id=\"mCR=??6l%bV4ZZ0^pb(0\">intakeDirection</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"dKZ{eQshu{,vff*B]y0H\"><field name=\"NUM\">0</field></shadow></value></block></next></block></statement><statement name=\"SUBSTACK2\"><block type=\"v5_motion_spin\" id=\"{Q=YyiUCt7|vIRiLc%H]\"><field name=\"MOTOR\">Intake</field><field name=\"DIRECTION\">fwd</field><next><block type=\"v5_variables_set_variable\" id=\"fE]Hd`bOf9EXhdIspi@%\"><field name=\"VARIABLE\" id=\"mCR=??6l%bV4ZZ0^pb(0\">intakeDirection</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"?*4VS@9`{@1NjPz(l|EL\"><field name=\"NUM\">-1</field></shadow></value></block></next></block></statement></block></next></block><block type=\"v5_events_when_controller_button\" id=\"ca:hToV-+G/x;?PJo!~{\" x=\"110\" y=\"830\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonR1</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"v5_motion_spin\" id=\"%Qiz.anyx;Q|.+Uuc[ER\"><field name=\"MOTOR\">Arm</field><field name=\"DIRECTION\">fwd</field><next><block type=\"v5_control_wait_until\" id=\"|PDcq7PBDXnQr^gaZi_)\"><value name=\"CONDITION\"><block type=\"v5_operator_not\" id=\"i56wZQawE%WF4RU!}u/q\"><value name=\"OPERAND\"><block type=\"v5_sensing_pressing_controller\" id=\"1][XLgS:!vCsa/1hoRKh\"><field name=\"CONTROLLER\">Controller1</field><field name=\"BUTTON\">ButtonR1</field></block></value></block></value><next><block type=\"v5_motion_stop_motor\" id=\"+D%dZvxAs$MJD/eooo/c\"><field name=\"MOTOR\">Arm</field></block></next></block></next></block></next></block></xml>","rconfig":[{"port":[1,2,3,4,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"}},{"port":[5],"name":"Arm","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"}},{"port":[6,7],"name":"Intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"true"}},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"}}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.3","minVersion":"3.0.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftMotorA = motor(PORT1, ratio18_1, false);\nmotor leftMotorB = motor(PORT2, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT3, ratio18_1, true);\nmotor rightMotorB = motor(PORT4, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 319.19, 295, 40, mm, 1);\n\nmotor Arm = motor(PORT5, ratio36_1, false);\n\nmotor IntakeMotorA = motor(PORT6, ratio18_1, false);\nmotor IntakeMotorB = motor(PORT7, ratio18_1, true);\nmotor_group Intake = motor_group(IntakeMotorA, IntakeMotorB);\n\ncontroller Controller1 = controller(primary);\n\n\n\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller1 = true;\nbool DrivetrainRNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis1\n      // right = Axis3 - Axis1\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis1.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis1.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller1) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller1 = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller1) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\ncompetition Competition;\n\nfloat myVariable, intakeDirection;\n\n// \"when driver control\" hat block\nint ondriver_drivercontrol_0() {\n  intakeDirection = 0.0;\n  return 0;\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  intakeDirection = 0.0;\n  return 0;\n}\n\n// \"when Controller1 ButtonL1 pressed\" hat block\nvoid onevent_Controller1ButtonL1_pressed_0() {\n  if (intakeDirection == 1.0) {\n    Intake.stop();\n    intakeDirection = 0.0;\n  }\n  else {\n    Intake.spin(forward);\n    intakeDirection = 1.0;\n  }\n}\n\n// \"when Controller1 ButtonL1 pressed\" hat block\nvoid onevent_Controller1ButtonL1_pressed_1() {\n  if (intakeDirection == -1.0) {\n    Intake.stop();\n    intakeDirection = 0.0;\n  }\n  else {\n    Intake.spin(forward);\n    intakeDirection = -1.0;\n  }\n}\n\n// \"when Controller1 ButtonR1 pressed\" hat block\nvoid onevent_Controller1ButtonR1_pressed_0() {\n  Arm.spin(forward);\n  waitUntil((!Controller1.ButtonR1.pressing()));\n  Arm.stop();\n}\n\nvoid VEXcode_driver_task() {\n  // Start the driver control tasks....\n  vex::task drive0(ondriver_drivercontrol_0);\n  while(Competition.isDriverControl() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n  drive0.stop();\n  return;\n}\n\nvoid VEXcode_auton_task() {\n  // Start the auton control tasks....\n\n  while(Competition.isAutonomous() && Competition.isEnabled()) {this_thread::sleep_for(10);}\n\n  return;\n}\n\n\n\nint main() {\n  vex::competition::bStopTasksBetweenModes = false;\n  Competition.autonomous(VEXcode_auton_task);\n  Competition.drivercontrol(VEXcode_driver_task);\n\n  // register event handlers\n  Controller1.ButtonL1.pressed(onevent_Controller1ButtonL1_pressed_0);\n  Controller1.ButtonL1.pressed(onevent_Controller1ButtonL1_pressed_1);\n  Controller1.ButtonR1.pressed(onevent_Controller1ButtonR1_pressed_0);\n\n  wait(15, msec);\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // wait for rotation sensor to fully initialize\n  wait(30, msec);\n\n  whenStarted1();\n}","target":"Physical"}